//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Saurabh
// generated from    : F:\testGit\git_test\Sample467\test514\test515.idsng
// IDesignSpec rev   : idsbatch v 6.16.4.7

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : PROPRIETARY
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------
/*----------------------------------------------------------------------
Class       : test515_cxx
-----------------------------------------------------------------------*/

`ifndef CLASS_test515_cxx
`define CLASS_test515_cxx
class test515_cxx extends uvm_reg;
    `uvm_object_utils(test515_cxx)

    rand uvm_reg_field xfcds;

    // Function : new
    function new(string name = "test515_cxx");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.xfcds = uvm_reg_field::type_id::create("xfcds");

        this.xfcds.configure(this, 32,  0, "RW", 0, 32'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test515_reg_name1
-----------------------------------------------------------------------*/

`ifndef CLASS_test515_reg_name1
`define CLASS_test515_reg_name1
class test515_reg_name1 extends uvm_reg;
    `uvm_object_utils(test515_reg_name1)

    rand uvm_reg_field xcz;

    // Function : new
    function new(string name = "test515_reg_name1");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.xcz = uvm_reg_field::type_id::create("xcz");

        this.xcz.configure(this, 32,  0, "RW", 0, 32'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test515_reg_name2
-----------------------------------------------------------------------*/

`ifndef CLASS_test515_reg_name2
`define CLASS_test515_reg_name2
class test515_reg_name2 extends uvm_reg;
    `uvm_object_utils(test515_reg_name2)

    rand uvm_reg_field xc;

    // Function : new
    function new(string name = "test515_reg_name2");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.xc = uvm_reg_field::type_id::create("xc");

        this.xc.configure(this, 32,  0, "RW", 0, 32'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test515_reg_name3
-----------------------------------------------------------------------*/

`ifndef CLASS_test515_reg_name3
`define CLASS_test515_reg_name3
class test515_reg_name3 extends uvm_reg;
    `uvm_object_utils(test515_reg_name3)

    rand uvm_reg_field xc;

    // Function : new
    function new(string name = "test515_reg_name3");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.xc = uvm_reg_field::type_id::create("xc");

        this.xc.configure(this, 32,  0, "RW", 0, 32'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test515_reg_name4
-----------------------------------------------------------------------*/

`ifndef CLASS_test515_reg_name4
`define CLASS_test515_reg_name4
class test515_reg_name4 extends uvm_reg;
    `uvm_object_utils(test515_reg_name4)

    rand uvm_reg_field cxc;

    // Function : new
    function new(string name = "test515_reg_name4");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.cxc = uvm_reg_field::type_id::create("cxc");

        this.cxc.configure(this, 32,  0, "RW", 0, 32'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class      : test515_block
-----------------------------------------------------------------------*/
`ifndef CLASS_test515_block
`define CLASS_test515_block
class test515_block extends uvm_reg_block;
    `uvm_object_utils(test515_block)

    rand test515_cxx cxx;

    rand test515_reg_name1 reg_name1;

    rand test515_reg_name2 reg_name2;

    rand test515_reg_name3 reg_name3;

    rand test515_reg_name4 reg_name4;

    // Function : new
    function new(string name = "test515_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //CXX
        cxx   =   test515_cxx::type_id::create("cxx");
        cxx.configure(this, null, "cxx");
        cxx.build();

        //REG_NAME1
        reg_name1   =   test515_reg_name1::type_id::create("reg_name1");
        reg_name1.configure(this, null, "reg_name1");
        reg_name1.build();

        //REG_NAME2
        reg_name2   =   test515_reg_name2::type_id::create("reg_name2");
        reg_name2.configure(this, null, "reg_name2");
        reg_name2.build();

        //REG_NAME3
        reg_name3   =   test515_reg_name3::type_id::create("reg_name3");
        reg_name3.configure(this, null, "reg_name3");
        reg_name3.build();

        //REG_NAME4
        reg_name4   =   test515_reg_name4::type_id::create("reg_name4");
        reg_name4.configure(this, null, "reg_name4");
        reg_name4.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
        default_map.add_reg(cxx, 'h0, "RW");
        default_map.add_reg(reg_name1, 'h4, "RW");
        default_map.add_reg(reg_name2, 'h8, "RW");
        default_map.add_reg(reg_name3, 'hC, "RW");
        default_map.add_reg(reg_name4, 'h10, "RW");

        lock_model();
    endfunction

endclass : test515_block
`endif
