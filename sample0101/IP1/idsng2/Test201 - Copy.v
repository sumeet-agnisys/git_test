/* Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****

*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
created by          :
generated by        : Agnisys71
IDesignSpec ver     :  7.12.0.0

**** This code is generated with the following settings ***
Reg Width                  : 32
Address Unit               : 8
C++ Types int              : hwint
Bus Type                   : CUSTOM
BigEndian                  : false
LittleEndian               : false
Dist. Decode and Readback  : false
------------------------------------------------------------ */

/*--------------------------------------------------
MODULE    :    SAMPLE_TOP MODULE
*/
module sample_top_ids#(
    
    // PARAMETERS
    
    
    
    parameter bus_width = 32,
    parameter addr_width = 4,
    parameter block_size = 'hC,
    
    parameter [addr_width-1 : 0] block_offset = {(addr_width){1'b0}}
    
    )
    
    (
    
    
    // REGISTER : ERROR11 PORT SIGNAL
    input  ERROR11_ERROR1_in,
    input ERROR11_ERROR1_in_enb,
    output  ERROR11_ERROR1_r,
    input  ERROR11_ERROR522_in,
    input ERROR11_ERROR522_in_enb,
    output  ERROR11_ERROR522_r,
    input  ERROR11_ERROR4fergfsedg_in,
    input ERROR11_ERROR4fergfsedg_in_enb,
    output  ERROR11_ERROR4fergfsedg_r,
    input  ERROR11_ERROR3eeee_in,
    input ERROR11_ERROR3eeee_in_enb,
    output  ERROR11_ERROR3eeee_r,
    input  ERROR11_ERROR222_in,
    input ERROR11_ERROR222_in_enb,
    output  ERROR11_ERROR222_r,
    output [22 : 0] ERROR11_RESERVED_r,
    input  ERROR11_ERROR12_in,
    input ERROR11_ERROR12_in_enb,
    output  ERROR11_ERROR12_r,
    
    // REGISTER : REG_NAME22 PORT SIGNAL
    output reg_name22_enb, // REGISTER ENABLE
    input [32- 1 : 0] reg_name22_reg1233_in,
    input reg_name22_reg1233_in_enb,
    output [31 : 0] reg_name22_reg1233_r,
    
    // REGISTER : REG_NAME33 PORT SIGNAL
    output reg_name33_enb, // REGISTER ENABLE
    input [32- 1 : 0] reg_name33_reg33_in,
    input reg_name33_reg33_in_enb,
    output [31 : 0] reg_name33_reg33_r,
    
    //CUSTOM signals
    input clk,     //Bus clock
    input reset_l,     //Reset
    input rd_stb,     //Read strobe        : This signal should be HIGH during read operation and LOW during write operation
    output rd_wait,     //Read wait
    input wr_stb,     //Write strobe       : This signal should be HIGH during write operation and LOW during read operation
    input [addr_width-1 : 0] address,     //Address for write/read
    input [bus_width-1 : 0] wr_data,     //Write data
    input [bus_width/8 -1 : 0] byteenable,     // Specify which bytes are being written or during read which bytes the master is reading
    output request,     //Bus request signal : HIGH indicates bus is free and LOW indicates bus is busy
    output rd_data_vld,     //Read data valid : Asserted by the slave to indicate that the read data signal contains valid data
    output [bus_width-1 : 0] rd_data     //Read data
    );
    
    
    
    wire ERROR11_decode;        // Write Decode
    wire [63 : 0] ERROR11_offset;        // Offset
    wire ERROR11_rd_valid;        // Read Valid
    wire [bus_width-1 : 0] ERROR11_rd_data;        // Read Data
    reg ERROR11_ERROR1_q; // FIELD : ERROR1
    reg ERROR11_ERROR522_q; // FIELD : ERROR522
    reg ERROR11_ERROR4fergfsedg_q; // FIELD : ERROR4fergfsedg
    reg ERROR11_ERROR3eeee_q; // FIELD : ERROR3eeee
    reg ERROR11_ERROR222_q; // FIELD : ERROR222
    wire [22 : 0] ERROR11_RESERVED_q; // FIELD : RESERVED
    reg ERROR11_ERROR12_q; // FIELD : ERROR12
    wire reg_name22_decode;        // Write Decode
    wire reg_name22_wr_valid;        // Write Valid
    wire [63 : 0] reg_name22_offset;        // Offset
    wire reg_name22_rd_valid;        // Read Valid
    wire [bus_width-1 : 0] reg_name22_rd_data;        // Read Data
    reg [31 : 0] reg_name22_reg1233_q; // FIELD : reg1233
    wire reg_name33_decode;        // Write Decode
    wire reg_name33_wr_valid;        // Write Valid
    wire [63 : 0] reg_name33_offset;        // Offset
    wire reg_name33_rd_valid;        // Read Valid
    wire [bus_width-1 : 0] reg_name33_rd_data;        // Read Data
    reg [31 : 0] reg_name33_reg33_q; // FIELD : reg33
    
    
    wire [bus_width-1 : 0] reg_enb;
    wire [bus_width/8 -1 : 0] byte_enb;
    
    
    assign byte_enb = byteenable;
    assign reg_enb = {
    {8{byte_enb[3]}} ,
    {8{byte_enb[2]}} ,
    {8{byte_enb[1]}} ,
    {8{byte_enb[0]}}};
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  ERROR11
    // ADDRESS       :  block_offset +'h0		WIDTH : 32
    // HW ACCESS     :  RW RO
    // SW ACCESS     :  READABLE
    //
    // FIELDS   :
    //     1 : ERROR1  ( SW : RO HW : RW )
    //     2 : ERROR522  ( SW : RO HW : RW )
    //     5 : ERROR4fergfsedg  ( SW : RO HW : RW )
    //     6 : ERROR3eeee  ( SW : RO HW : RW )
    //     7 : ERROR222  ( SW : RO HW : RW )
    //     30:8 : RESERVED  ( SW : RO HW : RO )
    //     31 : ERROR12  ( SW : RO HW : RW )
    //-----------------------------------------------------------------------------
    /* DESCRIPTION  :  Error indicationsbdfrsgtrstg
    */
    assign ERROR11_offset = block_offset +'h0;
    assign ERROR11_decode = (address[addr_width-1 : 0] == ERROR11_offset[addr_width-1 : 0]) ? 1'b1 : 1'b0;
    assign ERROR11_rd_valid = ERROR11_decode && rd_stb ;
    
    //----------------------------------------------------------------------------
    // FIELD  : ERROR1
    // HW ACCESS  : RW                          WIDTH : 1
    // SW ACCESS  : RO                          OFFSET : 1
    //-----------------------------------------------------------------
    /*DESCRIPTION    : Error new
    */
    
    always @(posedge clk)  begin
    if (!reset_l)
        begin
            ERROR11_ERROR1_q <= 1'd0;
        end
    else
        begin
            
        if (ERROR11_ERROR1_in_enb)	 //ERROR1 : HW Write
            begin
                ERROR11_ERROR1_q <= ERROR11_ERROR1_in;
            end
        end
    end //end always
    
    assign ERROR11_ERROR1_r = ERROR11_ERROR1_q; // Field : ERROR1
    
    //----------------------------------------------------------------------------
    // FIELD  : ERROR522
    // HW ACCESS  : RW                          WIDTH : 1
    // SW ACCESS  : RO                          OFFSET : 2
    //-----------------------------------------------------------------
    /*DESCRIPTION    :
    */
    
    always @(posedge clk)  begin
    if (!reset_l)
        begin
            ERROR11_ERROR522_q <= 1'd0;
        end
    else
        begin
            
        if (ERROR11_ERROR522_in_enb)	 //ERROR522 : HW Write
            begin
                ERROR11_ERROR522_q <= ERROR11_ERROR522_in;
            end
        end
    end //end always
    
    assign ERROR11_ERROR522_r = ERROR11_ERROR522_q; // Field : ERROR522
    
    //----------------------------------------------------------------------------
    // FIELD  : ERROR4FERGFSEDG
    // HW ACCESS  : RW                          WIDTH : 1
    // SW ACCESS  : RO                          OFFSET : 5
    //-----------------------------------------------------------------
    /*DESCRIPTION    :
    */
    
    always @(posedge clk)  begin
    if (!reset_l)
        begin
            ERROR11_ERROR4fergfsedg_q <= 1'd0;
        end
    else
        begin
            
        if (ERROR11_ERROR4fergfsedg_in_enb)	 //ERROR4fergfsedg : HW Write
            begin
                ERROR11_ERROR4fergfsedg_q <= ERROR11_ERROR4fergfsedg_in;
            end
        end
    end //end always
    
    assign ERROR11_ERROR4fergfsedg_r = ERROR11_ERROR4fergfsedg_q; // Field : ERROR4FERGFSEDG
    
    //----------------------------------------------------------------------------
    // FIELD  : ERROR3EEEE
    // HW ACCESS  : RW                          WIDTH : 1
    // SW ACCESS  : RO                          OFFSET : 6
    //-----------------------------------------------------------------
    /*DESCRIPTION    :
    */
    
    always @(posedge clk)  begin
    if (!reset_l)
        begin
            ERROR11_ERROR3eeee_q <= 1'd0;
        end
    else
        begin
            
        if (ERROR11_ERROR3eeee_in_enb)	 //ERROR3eeee : HW Write
            begin
                ERROR11_ERROR3eeee_q <= ERROR11_ERROR3eeee_in;
            end
        end
    end //end always
    
    assign ERROR11_ERROR3eeee_r = ERROR11_ERROR3eeee_q; // Field : ERROR3EEEE
    
    //----------------------------------------------------------------------------
    // FIELD  : ERROR222
    // HW ACCESS  : RW                          WIDTH : 1
    // SW ACCESS  : RO                          OFFSET : 7
    //-----------------------------------------------------------------
    /*DESCRIPTION    :
    */
    
    always @(posedge clk)  begin
    if (!reset_l)
        begin
            ERROR11_ERROR222_q <= 1'd0;
        end
    else
        begin
            
        if (ERROR11_ERROR222_in_enb)	 //ERROR222 : HW Write
            begin
                ERROR11_ERROR222_q <= ERROR11_ERROR222_in;
            end
        end
    end //end always
    
    assign ERROR11_ERROR222_r = ERROR11_ERROR222_q; // Field : ERROR222
    
    //----------------------------------------------------------------------------
    // FIELD  : RESERVED
    // HW ACCESS  : RO                          WIDTH : 23
    // SW ACCESS  : RO                          OFFSET : 8
    //-----------------------------------------------------------------
    /*DESCRIPTION    : Reserved fieldngdn
    */
    
    assign ERROR11_RESERVED_q = 23'd0;
    
    assign ERROR11_RESERVED_r = ERROR11_RESERVED_q; // Field : RESERVED
    
    //----------------------------------------------------------------------------
    // FIELD  : ERROR12
    // HW ACCESS  : RW                          WIDTH : 1
    // SW ACCESS  : RO                          OFFSET : 31
    //-----------------------------------------------------------------
    /*DESCRIPTION    :
    */
    
    always @(posedge clk)  begin
    if (!reset_l)
        begin
            ERROR11_ERROR12_q <= 1'd0;
        end
    else
        begin
            
        if (ERROR11_ERROR12_in_enb)	 //ERROR12 : HW Write
            begin
                ERROR11_ERROR12_q <= ERROR11_ERROR12_in;
            end
        end
    end //end always
    
    assign ERROR11_ERROR12_r = ERROR11_ERROR12_q; // Field : ERROR12
    assign ERROR11_rd_data  = ERROR11_rd_valid ? {ERROR11_ERROR12_q, ERROR11_RESERVED_q, ERROR11_ERROR222_q, ERROR11_ERROR3eeee_q, ERROR11_ERROR4fergfsedg_q, 2'h0, ERROR11_ERROR522_q, ERROR11_ERROR1_q, 1'h0} : 32'd0;
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_NAME22
    // ADDRESS       :  block_offset +'h4		WIDTH : 32
    // HW ACCESS     :  RW
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : reg1233  ( SW : RW HW : RW )
    //-----------------------------------------------------------------------------
    /* DESCRIPTION  :  NA
    */
    assign reg_name22_wr_valid = reg_name22_decode && wr_stb  ;
    assign reg_name22_offset = block_offset +'h4;
    assign reg_name22_decode = (address[addr_width-1 : 0] == reg_name22_offset[addr_width-1 : 0]) ? 1'b1 : 1'b0;
    assign reg_name22_rd_valid = reg_name22_decode && rd_stb ;
    assign reg_name22_enb = reg_name22_wr_valid;
    
    //----------------------------------------------------------------------------
    // FIELD  : REG1233
    // HW ACCESS  : RW                          WIDTH : 32
    // SW ACCESS  : RW                          OFFSET : 0
    //-----------------------------------------------------------------
    /*DESCRIPTION    : NA
    */
    
    always @(posedge clk)  begin
    if (!reset_l)
        begin
            reg_name22_reg1233_q <= 32'd0;
        end
    else
        begin
            
        if (reg_name22_reg1233_in_enb)	 //reg1233 : HW Write
            begin
                reg_name22_reg1233_q <= reg_name22_reg1233_in;
            end
        else
            begin
            if (reg_name22_wr_valid)	 //REG1233 : SW Write
                begin
                    reg_name22_reg1233_q <= (wr_data [31 : 0]  & reg_enb  [31 : 0] ) | (reg_name22_reg1233_q & (~reg_enb  [31 : 0] ));
                end
            end
        end
    end //end always
    
    assign reg_name22_reg1233_r = reg_name22_reg1233_q; // Field : REG1233
    assign reg_name22_rd_data  = reg_name22_rd_valid ? {reg_name22_reg1233_q} : 32'd0;
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_NAME33
    // ADDRESS       :  block_offset +'h8		WIDTH : 32
    // HW ACCESS     :  RW
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : reg33  ( SW : RW HW : RW )
    //-----------------------------------------------------------------------------
    /* DESCRIPTION  :  NA
    */
    assign reg_name33_wr_valid = reg_name33_decode && wr_stb  ;
    assign reg_name33_offset = block_offset +'h8;
    assign reg_name33_decode = (address[addr_width-1 : 0] == reg_name33_offset[addr_width-1 : 0]) ? 1'b1 : 1'b0;
    assign reg_name33_rd_valid = reg_name33_decode && rd_stb ;
    assign reg_name33_enb = reg_name33_wr_valid;
    
    //----------------------------------------------------------------------------
    // FIELD  : REG33
    // HW ACCESS  : RW                          WIDTH : 32
    // SW ACCESS  : RW                          OFFSET : 0
    //-----------------------------------------------------------------
    /*DESCRIPTION    : NA
    */
    
    always @(posedge clk)  begin
    if (!reset_l)
        begin
            reg_name33_reg33_q <= 32'd0;
        end
    else
        begin
            
        if (reg_name33_reg33_in_enb)	 //reg33 : HW Write
            begin
                reg_name33_reg33_q <= reg_name33_reg33_in;
            end
        else
            begin
            if (reg_name33_wr_valid)	 //REG33 : SW Write
                begin
                    reg_name33_reg33_q <= (wr_data [31 : 0]  & reg_enb  [31 : 0] ) | (reg_name33_reg33_q & (~reg_enb  [31 : 0] ));
                end
            end
        end
    end //end always
    
    assign reg_name33_reg33_r = reg_name33_reg33_q; // Field : REG33
    assign reg_name33_rd_data  = reg_name33_rd_valid ? {reg_name33_reg33_q} : 32'd0;
    
    
    
    assign rd_data_vld = rd_stb;
    assign rd_data = ERROR11_rd_data  |
    reg_name22_rd_data  |
    reg_name33_rd_data ;
    assign request = 1'b1;
    assign rd_wait = 1'b1;
    
endmodule

