//
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created on        : 2019-12-24T12:18:38.742+05:30
// created by        :
// generated by      : Sameer
// generated from    : C:\Users\Sameer\Documents\GitHub\git_test\proj1\uu\uu.idsng
// IDesignSpec rev   : idsbatch v 6.16.4.7

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : PROPRIETARY
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------

//------------------------------------------------
//  BLOCK : UU MODULE
//

module uu_ids #(
    
    //  PARAMETERS
    parameter bus_width   = 32,
    parameter addr_width = 4,
    
    parameter block_offset  = {(addr_width){1'b0}},
    
    
    parameter uu_address_width = addr_width
    )
    
    (
    
    //-----------------------------------------------------
    // REGISTER : REG1 SIGNALS
    
    output   reg1_enb,
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] reg1_f1_in,    // FIELD : F1
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   reg1_f1_in_enb,    // FIELD : F1
    
    
    // READ DATA SIGNAL FOR EACH FIELD
    output [31 : 0] reg1_f1_r,    // FIELD : F1
    
    
    
    //-----------------------------------------------------
    // REGISTER : REG2 SIGNALS
    
    output   reg2_enb,
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] reg2_f2_in,    // FIELD : F2
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   reg2_f2_in_enb,    // FIELD : F2
    
    
    // READ DATA SIGNAL FOR EACH FIELD
    output [31 : 0] reg2_f2_r,    // FIELD : F2
    
    
    
    //-----------------------------------------------------
    // REGISTER : REG3 SIGNALS
    
    output   reg3_enb,
    
    // READ DATA SIGNAL FOR EACH FIELD
    output [31 : 0] reg3_f3_r,    // FIELD : F3
    
    
    
    
    //CUSTOM signals
    input clk,     //Bus clock
    input reset_l,     //Reset
    input rd_stb,     //Read strobe        : This signal should be HIGH during read operation and LOW during write operation
    output rd_wait,     //Read wait
    input wr_stb,     //Write strobe       : This signal should be HIGH during write operation and LOW during read operation
    input [addr_width-1 : 0] address,     //Address for write/read
    input [bus_width-1 : 0] wr_data,     //Write data
    input [bus_width/8-1 : 0] byteenable,     //Specify which bytes are being written or during read which bytes the master is reading
    output request,     //Bus request signal : HIGH indicates bus is free and LOW indicates bus is busy
    output rd_data_vld,     //Read data valid : Asserted by the slave to indicate that the read data signal contains valid data
    output [bus_width-1 : 0] rd_data     //Read data
    
    );
    //-----------------------------------------------------
    // REGISTER : REG1 SIGNALS
    
    
    wire    reg1_decode;         // DECODE
    wire    reg1_wr_valid;       // WRITE VALID
    wire    [bus_width-1 : 0] reg1_rd_data;          // READ DATA
    wire    [64-1 : 0] reg1_offset;  // OFFSET
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] reg1_f1_q ;      // FIELD : F1
    
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG2 SIGNALS
    
    
    wire    reg2_decode;         // DECODE
    wire    reg2_wr_valid;       // WRITE VALID
    wire    [bus_width-1 : 0] reg2_rd_data;          // READ DATA
    wire    [64-1 : 0] reg2_offset;  // OFFSET
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] reg2_f2_q ;      // FIELD : F2
    
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG3 SIGNALS
    
    
    wire    reg3_decode;         // DECODE
    wire    reg3_wr_valid;       // WRITE VALID
    wire    [bus_width-1 : 0] reg3_rd_data;          // READ DATA
    wire    [64-1 : 0] reg3_offset;  // OFFSET
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] reg3_f3_q ;      // FIELD : F3
    
    //-----------------------------------------------------
    
    
    
    
    //CUSTOM signals
    
    wire [bus_width-1 : 0] reg_enb;
    wire [bus_width/8 -1 : 0] byte_enb;
    
    assign byte_enb = byteenable;
    assign reg_enb =  {
    {8{byte_enb[3]}} ,
    {8{byte_enb[2]}} ,
    {8{byte_enb[1]}} ,
    {8{byte_enb[0]}}};
    
    
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG1
    // ADDRESS       :  block_offset+'h0                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : f1  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign reg1_wr_valid = reg1_decode && wr_stb;
    assign reg1_enb      = reg1_wr_valid;
    assign reg1_offset = block_offset+'h0;
    assign reg1_decode  = (address[uu_address_width-1 : 0]    == reg1_offset[uu_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : F1
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                reg1_f1_q  <= 32'd0;
            end
        else
            begin
            if (reg1_f1_in_enb)   // F1 : HW Write
                begin
                    reg1_f1_q <= reg1_f1_in;
                end
            else
                begin
                    
                if (reg1_wr_valid)   // F1 : SW Write
                    begin
                        reg1_f1_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (reg1_f1_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign reg1_f1_r  =  reg1_f1_q ;    // Field : F1
    
    
    assign reg1_rd_data = reg1_decode ? {reg1_f1_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG2
    // ADDRESS       :  block_offset+'h4                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : f2  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign reg2_wr_valid = reg2_decode && wr_stb;
    assign reg2_enb      = reg2_wr_valid;
    assign reg2_offset = block_offset+'h4;
    assign reg2_decode  = (address[uu_address_width-1 : 0]    == reg2_offset[uu_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : F2
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                reg2_f2_q  <= 32'd0;
            end
        else
            begin
            if (reg2_f2_in_enb)   // F2 : HW Write
                begin
                    reg2_f2_q <= reg2_f2_in;
                end
            else
                begin
                    
                if (reg2_wr_valid)   // F2 : SW Write
                    begin
                        reg2_f2_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (reg2_f2_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign reg2_f2_r  =  reg2_f2_q ;    // Field : F2
    
    
    assign reg2_rd_data = reg2_decode ? {reg2_f2_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG3
    // ADDRESS       :  block_offset+'h8                WIDTH : 32
    // HW ACCESS     :  READ-ONLY
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : f3  ( SW : Read-Write HW : Read-only )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign reg3_wr_valid = reg3_decode && wr_stb;
    assign reg3_enb      = reg3_wr_valid;
    assign reg3_offset = block_offset+'h8;
    assign reg3_decode  = (address[uu_address_width-1 : 0]    == reg3_offset[uu_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : F3
    // HW ACCESS  :  READ-ONLY                           WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                reg3_f3_q  <= 32'd0;
            end
        else
            begin
                
            if (reg3_wr_valid)   // F3 : SW Write
                begin
                    reg3_f3_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (reg3_f3_q & (~reg_enb[31 : 0]));
                end
                
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign reg3_f3_r  =  reg3_f3_q ;    // Field : F3
    
    
    assign reg3_rd_data = reg3_decode ? {reg3_f3_q} : 32'b00000000000000000000000000000000;
    
    
    
    
    assign rd_data = reg1_rd_data |
    reg2_rd_data |
    reg3_rd_data ;
    
    
    
    assign request      =  1'b1;
    assign rd_data_vld   =  rd_stb;
    assign rd_wait       =  1'b1;
    
    
endmodule
