//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created on        : 2019-12-24T12:28:57.735+05:30
// created by        :
// generated by      : Sameer
// generated from    : C:\Users\Sameer\Documents\GitHub\git_test\proj1\hello1\hello1.idsng
// IDesignSpec rev   : idsbatch v 6.16.4.7

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : PROPRIETARY
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------
/*----------------------------------------------------------------------
Class       : hello1_reg_name
-----------------------------------------------------------------------*/

`ifndef CLASS_hello1_reg_name
`define CLASS_hello1_reg_name
class hello1_reg_name extends uvm_reg;
    `uvm_object_utils(hello1_reg_name)

    rand uvm_reg_field f;

    // Function : new
    function new(string name = "hello1_reg_name");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.f = uvm_reg_field::type_id::create("f");

        this.f.configure(this, 32,  0, "RW", 0, 32'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : hello1_reggroup1_reg1
-----------------------------------------------------------------------*/

`ifndef CLASS_hello1_reggroup1_reg1
`define CLASS_hello1_reggroup1_reg1
class hello1_reggroup1_reg1 extends uvm_reg;
    `uvm_object_utils(hello1_reggroup1_reg1)

    rand uvm_reg_field f;

    // Function : new
    function new(string name = "hello1_reggroup1_reg1");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.f = uvm_reg_field::type_id::create("f");

        this.f.configure(this, 32,  0, "RW", 0, 32'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : hello1_reggroup1
-----------------------------------------------------------------------*/
`ifndef CLASS_hello1_reggroup1
`define CLASS_hello1_reggroup1
class hello1_reggroup1 extends uvm_reg_file;
    `uvm_object_utils(hello1_reggroup1)

    rand hello1_reggroup1_reg1 reg1;

    // Function : new
    function new(string name = "hello1_reggroup1");
        super.new(name);
    endfunction

    // Function : build
    virtual function void build();
        //create
        reg1   =   hello1_reggroup1_reg1::type_id::create("reg1");

        //config
        reg1.configure(get_block(), this, "reg1");

        //build
        reg1.build();
    endfunction

    virtual function void map(uvm_reg_map mp, uvm_reg_addr_t offset);
        //add reg and regfiles
        mp.add_reg(reg1, offset +  'h0, "RW");
    endfunction

    virtual function void set_offset(uvm_reg_map mp, uvm_reg_addr_t offset);
        reg1.set_offset(mp, offset +  'h0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class      : hello1_block
-----------------------------------------------------------------------*/
`ifndef CLASS_hello1_block
`define CLASS_hello1_block
class hello1_block extends uvm_reg_block;
    `uvm_object_utils(hello1_block)

    rand hello1_reg_name reg_name;

    rand hello1_reggroup1 reggroup1;

    // Function : new
    function new(string name = "hello1_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //REG_NAME
        reg_name   =   hello1_reg_name::type_id::create("reg_name");
        reg_name.configure(this, null, "reg_name");
        reg_name.build();

        //REGGROUP1
        reggroup1   =   hello1_reggroup1::type_id::create("reggroup1");
        reggroup1.configure(this, null, "reggroup1");
        reggroup1.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
        default_map.add_reg(reg_name, 'h0, "RW");
        reggroup1.map(default_map, 'h4);

        lock_model();
    endfunction

endclass : hello1_block
`endif
